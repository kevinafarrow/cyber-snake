{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Food.svelte",
    "../../SnakeBody.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Snake from \"./Snake.svelte\";\n  import Food from \"./Food.svelte\";\n  let foodLeft = 0;\n  let foodTop = 0;\n  let direction = 'right';\n  let snakeBodies = [];\n  let ms = 100;\n  let board = {'width': 1250, 'height': 750};\n  let unit = 50;\n\n\n  //draw the game repeatedly\n  setInterval(() => {\n    //console.log('speed: ' + ms);\n    snakeBodies.pop();\n    let { left, top } = snakeBodies[0];\n    const directions = {\n      'up': {'top': -50, 'left': 0},\n      'down': {'top': 50, 'left': 0},\n      'left': {'top': 0, 'left': -50},\n      'right': {'top': 0, 'left': 50},\n      undefined: {'top': 0, 'left': 0}\n    }\n    top += directions[direction]['top']\n    left += directions[direction]['left']\n    //console.log('top: ' + top)\n    //console.log('left: ' + left)\n\n    const newHead = { left, top };\n    snakeBodies = [ newHead, ...snakeBodies];\n\n    // if the snake eats food, create a new food and add a piece to the snake\n    if (isCollide(newHead, { left: foodLeft, top: foodTop})) {\n      moveFood();\n      snakeBodies = [...snakeBodies, snakeBodies[snakeBodies.length - 1]];\n    }\n\n    if (isGameOver()) {\n      alert(\"Game Over!\");\n      resetGame();\n    }\n  }, ms)\n\n  function isCollide(a, b) {\n    return !(\n      a.top < b.top ||\n      a.top > b.top ||\n      a.left < b.left ||\n      a.left > b.left\n    );\n  }\n\n  function moveFood() {\n    foodTop = Math.floor(Math.random() * Math.floor(board.height / unit)) * unit;\n    foodLeft = Math.floor(Math.random() * Math.floor(board.width / unit)) * unit;\n  }\n\n  function isGameOver() {\n    const snakeBodiesNoHead = snakeBodies.slice(1);\n    const snakeCollisions = snakeBodiesNoHead.filter(sb => isCollide(sb, snakeBodies[0]));\n    if (snakeCollisions.length !== 0) {\n      return true;\n    }\n    const { top, left } = snakeBodies[0];\n    if (top >= board.height|| top < 0 || left >= board.width|| left < 0){\n      return true;\n    }\n  }\n\n  function isOpposite(a, b) {\n    const opposites = {\n      'up': 'down',\n      'down': 'up',\n      'left': 'right',\n      'right': 'left',\n      'none': 'asdf'\n    }\n    //console.log('a: ' + a)\n    //console.log('opposite a: ' + opposites[a])\n    //console.log('b: ' + b)\n    //console.log('opposite b: ' + opposites[b])\n    if (opposites[a] == b) {\n      return true\n    }\n  }\n\n  function onKeyDown(e) {\n    const newDirection = getDirectionFromKeyCode(e.keyCode);\n    console.log(newDirection);\n    if (!isOpposite(newDirection, direction)) {\n      direction = newDirection;\n    }\n  }\n\n  function resetGame() {\n    moveFood();\n    direction = 'right';\n    snakeBodies = [\n      { left: unit * 2, top: 0 },\n      { left: unit * 1, top: 0 },\n      { left: unit * 0, top: 0 }\n    ]\n  }\n\n  function getDirectionFromKeyCode(keyCode) {\n    const keyTransform = {\n      37: 'left',\n      38: 'up',\n      39: 'right',\n      40: 'down'\n    }\n    //console.log('keyCode pressed: ' + keyCode)\n    //console.log('current direction: ' + direction)\n    if ( 36 < keyCode && keyCode < 41) {\n      //console.log('new direction: ' + keyTransform[keyCode])\n      return keyTransform[keyCode];\n    } else {\n      //console.log('direction unchanged: ' + direction)\n      return direction;\n    }\n  }\n  resetGame();\n    //background-image: url(\"../background.jpg\");\n</script>\n\n\n<style>\n  main {\n    width: 1250px;\n    height: 750px;\n    border: solid black 1px;\n    position: relative;\n    margin: 20px auto;\n    background-size: contain;\n    background-color: #333333;\n  }\n  h2,\n  h1 {\n    text-align: center;\n    font-family: 'Roboto Mono', monospace;\n  }\n</style>\n\n<h1>Cyber Snake</h1>\n<main>\n  <Snake {snakeBodies} {direction}/>\n  <Food {foodLeft} {foodTop} />\n</main>\n<svelte:window on:keydown={onKeyDown} />",
    "<script>\n  export let foodTop;\n  export let foodLeft;\n</script>\n\n<style>\n  .food {\n    width: 48px;\n    height: 48px;\n    position: absolute;\n    border: solid black 1px;\n    background-color: #DD0000;\n    border-radius: 50%;\n    z-index: 0;\n  }\n</style>\n\n<div class=\"food\" style=\"left: {foodLeft}px; top: {foodTop}px\"/>\n",
    "<script>\n  export let top = unit;\n  export let left = unit;\n  export let isHead = false;\n  export let direction = \"right\";\n</script>\n\n<style>\n  .snake-body {\n    background-color: #00DDDD;\n    border: #00DDDD 1px solid;\n    position: absolute;\n    width: 48px;\n    height: 48px;\n    z-index: 3;\n  }\n  .eyes {\n    position: absolute;\n    background-color: #ADFF2F;\n    border: green 1px solid;\n    border-radius: 50%;\n    width: 20%;\n    height: 20%;\n  }\n  .mouth{\n    position: absolute;\n    background-color: black;\n    border-radius: 30%;\n    width: 20%;\n    height: 80%;\n  }\n  .pupils {\n    position: absolute;\n    background-color: black;\n    border-radius: 50%;\n    width: 5%;\n    height: 5%;\n  }\n  #leftEye {\n    left: 50%;\n    top: 25%;\n  }\n  #rightEye {\n    left: 50%;\n    bottom: 25%;\n  }\n  #leftPupil {\n    left: 63%;\n    top: 33%;\n  }\n  #rightPupil {\n    left: 63%;\n    bottom: 33%;\n  }\n  #mouth {\n    left: 80%;\n    top: 10%;\n  }\n  .snake-body.right {\n    transform: rotate(0deg);\n  }\n  .snake-body.left {\n    transform: rotate(180deg);\n  }\n  .snake-body.up {\n    transform: rotate(270deg);\n  }\n  .snake-body.down {\n    transform: rotate(90deg);\n  }\n</style>\n\n<div class=\"snake-body {direction}\" style=\"left: {left}px; top: {top}px;\">\n  {#if isHead}\n    <div id=\"leftEye\" class=\"eyes\" />\n    <div id=\"rightEye\" class=\"eyes\" />\n    <div id=\"leftPupil\" class=\"pupils\" />\n    <div id=\"rightPupil\" class=\"pupils\" />\n    <div id=\"mouth\" class=\"mouth\" />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAgIE,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,eAAe,CAAE,OAAO,CACxB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,aAAa,CAAC,CAAC,SAAS,AACvC,CAAC;ACvID,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,AACZ,CAAC;ACND,WAAW,eAAC,CAAC,AACX,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,OAAO,CAAC,GAAG,CAAC,KAAK,CACzB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,KAAK,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AACD,qBAAM,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,KAAK,CACvB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AACD,OAAO,eAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,KAAK,CACvB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,EAAE,CACT,MAAM,CAAE,EAAE,AACZ,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC,AACD,SAAS,eAAC,CAAC,AACT,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,AACb,CAAC,AACD,UAAU,eAAC,CAAC,AACV,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC,AACD,WAAW,eAAC,CAAC,AACX,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,AACb,CAAC,AACD,MAAM,eAAC,CAAC,AACN,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC,AACD,WAAW,MAAM,eAAC,CAAC,AACjB,SAAS,CAAE,OAAO,IAAI,CAAC,AACzB,CAAC,AACD,WAAW,KAAK,eAAC,CAAC,AAChB,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,GAAG,eAAC,CAAC,AACd,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,KAAK,eAAC,CAAC,AAChB,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC"
}