{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Answerbox.svelte",
    "../../App.svelte",
    "../../Food.svelte",
    "../../Questionbox.svelte",
    "../../SnakeBody.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let result;\n  export let explanation;\n</script>\n\n<div class=\"answerbox\">\n  <div class=\"result\">{result}</div>\n  <div class=\"explanation\">{explanation}</div>\n</div>\n\n<style>\n  .answerbox {\n    width: 92%;\n    height: 200px;\n    border: 1px solid #aaa;\n\t\tborder-radius: 2px;\n    position: relative right;\n    margin: auto;\n\t\tbox-shadow: 2px 2px 8px rgba(0,0,0,0.1);\n\t\tpadding: 1em;\n\t\tbackground-color: #FFFFFF;\n\t\tfont-family: 'Roboto Mono', monospace;\n\t}\n  .result {\n\t\tfont-size: 2em;\n    text-align: center;\n\t}\n  .explanation {\n    font-size: 1.5em;\n    text-align: center;\n  }\n</style>",
    "<script>\n  import Snake from \"./Snake.svelte\";\n  import Food from \"./Food.svelte\";\n  import Questionbox from \"./Questionbox.svelte\";\n  import Answerbox from \"./Answerbox.svelte\";\n\n  let questions = [\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'paulsimon',\n        'incorrect': 'janice',\n        'explanation': 'Longer passwords are better.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'basketball15',\n        'incorrect': 'heartbreaker',\n        'explanation': 'Adding numbers makes the password stronger.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'HotChocolate',\n        'incorrect': 'peanutbutter',\n        'explanation': 'Adding capitals makes the password stronger.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': '(tinkerbell)',\n        'incorrect': 'peaceandlove',\n        'explanation': 'Adding special characters makes the password stronger.'\n    },\n    {\n        'question': 'Which password is stronger',\n        'correct': 'Greenm0nster',\n        'incorrect': 'OrlandoBloom',\n        'explanation': \"'Greenm0nster' has an uppercase and a number, 'OrlandoBloom' has only lowercase and uppercase.\"\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'mydogisBecky',\n        'incorrect': 'Transformers',\n        'explanation': 'Capitalizing the first character is more easily guessed by a hacker.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'neoalejapkeh',\n        'incorrect': '892337850912',\n        'explanation': 'Letters are stronger than numbers as there are more letters to guess.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'boxrtlpanwbd',\n        'incorrect': 'supernatural',\n        'explanation': 'Random passwords are stronger than dictionary words.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'smartlyscored',\n        'incorrect': 'wewillrockyou',\n        'explanation': \"'We will rock you' is a recognizable phrase and easier to guess.\"\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'bootleg918',\n        'incorrect': 'b00tlegger',\n        'explanation': 'Replacing letters with numbers that look similar is an easily guessed pattern.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'samantha0964',\n        'incorrect': 'carolina1234',\n        'explanation': 'Sequential numbers are easier to guess than random numbers.'\n    },\n    {\n        'question': 'Which password is stronger?',\n        'correct': 'superman8290',\n        'incorrect': 'football2006',\n        'explanation': 'Common date formats are easier to guess than random numbers'\n    },\n    {\n        'question': 'True or false, it is best to use the same strong password accross all accounts.',\n        'correct': 'False',\n        'incorrect': 'True',\n        'explanation': 'If one account gets breached, all accounts with that password are compromised.'\n    },\n    {\n        'question': 'Which is better?',\n        'correct': 'Using a password manager',\n        'incorrect': 'Remembering all your passwords in your head',\n        'explanation': \"Computers can guess everything you can remember. Best to let a computer generate good passwords you don't have to remember.\"\n    },\n    {\n        'question': 'True or false, having a strong password means no hacker could learn your password.',\n        'correct': 'False',\n        'incorrect': 'True',\n        'explanation': 'There are ways a hacker can retrieve even a strong password.'\n    },\n    {\n        'question': 'True or false, it is more secure to use multi factor authentication.',\n        'correct': 'True',\n        'incorrect': 'False',\n        'explanation': 'Multi factor authentication adds another layer of security to your account.'\n    },\n    {\n        'question': \"A number you don't recognize asks for your MFA token. Do you give it to them?\",\n        'correct': 'No',\n        'incorrect': 'Yes',\n        'explanation': 'Never give a third party your MFA authentication token.'\n    },\n    {\n        'question': \"A service you use notifies you your account has been breached. You should\",\n        'correct': 'Change your password and enable multi factor authentication',\n        'incorrect': 'Delete your account',\n        'explanation': 'Resetting your password and enabling MFA is usually enough after a breach.',\n    },\n    {\n        'question': 'Which is better?',\n        'correct': 'Using software services with good security reputations',\n        'incorrect': \"Using obscure software services that hackers don't know about\",\n        'explanation': 'It is best to use software with a strong reputation. Obscure services might not have resources to invest in security'\n    },\n    {\n        'question': 'True or false, it is important to keep all your devices up to date with the latest software updates',\n        'correct': 'True',\n        'incorrect': 'False',\n        'explanation': 'Many updates involve security patches. Not updating is a security risk.'\n    },\n    {\n        'question': 'True or false, iCloud, OneDrive, and Google Drive are good defenses against ransomware',\n        'correct': 'True',\n        'incorrect': 'False',\n        'explanation': 'Having a backup of your information online is a good practice to defend against ransomeware.'\n    },\n    {\n        'question': 'True or false, it is more private to use a VPN.',\n        'correct': 'False',\n        'incorrect': 'True',\n        'explanation': 'Using a VPN just means you trust the VPN provider instead of your Internet Provider.'\n    },\n  ]\n  console.log('you have ' + questions.length + ' questions.');\n\n  // Initialize some variables\n  let question = \"\";\n  let option1 = \"\";\n  let option2 = \"\";\n  let correct = \"\";\n  let incorrect = \"\";\n  let result = \"\";\n  let explanation = \"\";\n  console.log(\"explanation: \" + explanation);\n  let collidedIncorrect = false;\n  let collidedCorrect = false;\n  let answerKey = [];\n  let foodEaten = \"\";\n  let correctFood = \"food1\";\n  let answerFoods = [\"food1\", \"food2\"];\n  let pauseSpeed = 100000000;\n  let questionNumber = 0;\n\n  let food1Left = 0;\n  let food1Top = 0;\n  let food2Left = 0;\n  let food2Top = 0;\n  let direction = 'right';\n  let snakeBodies = [];\n  let speed = 100;\n  let board = {'width': 1250, 'height': 550};\n  let unit = 50;\n  let gameOver = false;\n\n  alert(\"Welcome to Cyber Snake!\");\n  alert(\"It's like classic snake, but with quesions! Read the question at the top and eat the food associated with the correct answer!\");\n  alert(\"You'll have 3 seconds to read the question before you are back in the game.\");\n  alert(\"Press OK to start! Good luck!\");\n\n  function initVariables () {\n    console.log('initializing variables');\n    gameOver = false;\n    questionNumber = 0;\n    result = \"\";\n    explanation = \"\";\n    newQuestion();\n  }\n\n  initVariables();\n\n  let clear\n  //i got this from svelte REPL and don't know exactly how it works, but it enables the pause button\n  $: {\n\t  clearInterval(clear)\n\t  clear = setInterval(runGame, speed)\n  }\n\n  //draw the game repeatedly\n  function runGame() {\n    //console.log('speed: ' + ms);\n    snakeBodies.pop();\n    let { left, top } = snakeBodies[0];\n    const directions = {\n      'up': {'top': -50, 'left': 0},\n      'down': {'top': 50, 'left': 0},\n      'left': {'top': 0, 'left': -50},\n      'right': {'top': 0, 'left': 50},\n      undefined: {'top': 0, 'left': 0}\n    }\n    top += directions[direction]['top']\n    left += directions[direction]['left']\n    //console.log('top: ' + top)\n    //console.log('left: ' + left)\n\n    const newHead = { left, top };\n    snakeBodies = [ newHead, ...snakeBodies];\n\n    // if the snake eats food, create a new food and add a piece to the snake\n    if (isCollide(newHead, { left: food1Left, top: food1Top })) {\n      foodEaten = 'food1';\n    } else if (isCollide(newHead, {left: food2Left, top: food2Top})) {\n      foodEaten = 'food2';\n    }\n    if ((isCollide(newHead, { left: food1Left, top: food1Top })) || (isCollide(newHead, { left: food2Left, top: food2Top }))) {\n      console.log('food eaten: ' + foodEaten);\n      console.log('correctFood: ' + correctFood);\n      explanation = questions[questionNumber - 1]['explanation'];\n      if (foodEaten === correctFood) {\n        if (questionNumber == questions.length) {\n          alert(\"You won!\");\n          resetGame();\n        }\n        newQuestion();\n        setSpeed(3000);\n        delayedUnpause(3000);\n        moveFood();\n        snakeBodies = [...snakeBodies, snakeBodies[snakeBodies.length - 1]];\n        result = \"Correct!\";\n      } else {\n        result = \"Incorrect.\";\n        gameOver = true;\n      }\n      if (questionNumber > 0) {\n        console.log('setting explanation: ' + explanation);\n        console.log('question number: ' + questionNumber);\n      }\n    }\n\n    isGameOver()\n    if (gameOver) {\n      alert(\"Game Over!\\n\" + explanation);\n      resetGame();\n    }\n  }\n\n  const delay = ms => new Promise(res => setTimeout(res, ms));\n  const delayedUnpause = async (delayTime) => {\n    await delay(delayTime);\n    console.log(\"Waited \" + delayTime);\n    setSpeed(100);\n  };\n  \n  function shuffle(array) {\n    let currentIndex = array.length,  randomIndex;\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n\n  function newQuestion() {\n    console.log('getting new question');\n    question = questions[questionNumber]['question'];\n    incorrect = questions[questionNumber]['incorrect'];\n    correct = questions[questionNumber]['correct']\n    const answers = [ incorrect, correct ];\n    shuffle(answers);\n    option1 = answers[0];\n    option2 = answers[1];\n    correctFood = answerFoods[answers.indexOf(correct)];\n    questionNumber++;\n    console.log('after getting new question')\n    console.log('question number: ' + questionNumber);\n    console.log('option1: ' + option1);\n    console.log('option2: ' + option2);\n    console.log('correct: ' + correct);\n    console.log('incorrect: ' + incorrect);\n    console.log('correctFood: ' + correctFood);\n  }\n\n  function isCollide(a, b) {\n    return !(\n      a.top < b.top ||\n      a.top > b.top ||\n      a.left < b.left ||\n      a.left > b.left\n    );\n  }\n\n  function moveFood() {\n    food1Top = Math.floor(Math.random() * Math.floor(board.height / unit)) * unit;\n    food1Left = Math.floor(Math.random() * Math.floor(board.width / unit)) * unit;\n    food2Top = Math.floor(Math.random() * Math.floor(board.height / unit)) * unit;\n    food2Left = Math.floor(Math.random() * Math.floor(board.width / unit)) * unit;\n    while ((food2Left === food1Left) & (food2Top === food1Top)) {\n      food2Top = Math.floor(Math.random() * Math.floor(board.height / unit)) * unit;\n      food2Left = Math.floor(Math.random() * Math.floor(board.width / unit)) * unit;\n    }\n  }\n\n  function isGameOver() {\n    //console.log('calling is gameover: ' + gameOver)\n    const snakeBodiesNoHead = snakeBodies.slice(1);\n    const snakeCollisions = snakeBodiesNoHead.filter(sb => isCollide(sb, snakeBodies[0]));\n    if (snakeCollisions.length !== 0) {\n      gameOver = true;\n    }\n    const { top, left } = snakeBodies[0];\n    if (top >= board.height|| top < 0 || left >= board.width|| left < 0){\n      gameOver = true;\n    }\n  }\n\n  function setSpeed(newSpeed) {\n    console.log('changing speed to ' + newSpeed);\n    speed = newSpeed;\n  }\n\n  function isOpposite(a, b) {\n    const opposites = {\n      'up': 'down',\n      'down': 'up',\n      'left': 'right',\n      'right': 'left',\n      'none': 'asdf'\n    }\n    //console.log('a: ' + a)\n    //console.log('opposite a: ' + opposites[a])\n    //console.log('b: ' + b)\n    //console.log('opposite b: ' + opposites[b])\n    if (opposites[a] == b) {\n      return true\n    }\n  }\n\n  function onKeyDown(e) {\n    //console.log('keyCode: ' + e.keyCode)\n    if (e.keyCode == 32) {\n      if (speed == pauseSpeed) {\n        setSpeed(100);\n      } else {\n        setSpeed(pauseSpeed);\n      }\n    }\n    const newDirection = getDirectionFromKeyCode(e.keyCode);\n    //console.log(newDirection);\n    if (!isOpposite(newDirection, direction)) {\n      direction = newDirection;\n    }\n  }\n\n  function resetGame() {\n    initVariables();\n    moveFood();\n    direction = 'right';\n    snakeBodies = [\n      { left: unit * 2, top: 0 },\n      { left: unit * 1, top: 0 },\n      { left: unit * 0, top: 0 }\n    ]\n  }\n\n  function getDirectionFromKeyCode(keyCode) {\n    const keyTransform = {\n      37: 'left',\n      38: 'up',\n      39: 'right',\n      40: 'down'\n    }\n    //console.log('keyCode pressed: ' + keyCode)\n    //console.log('current direction: ' + direction)\n    if ( 36 < keyCode && keyCode < 41) {\n      //console.log('new direction: ' + keyTransform[keyCode])\n      return keyTransform[keyCode];\n    } else {\n      //console.log('direction unchanged: ' + direction)\n      return direction;\n    }\n  }\n  resetGame();\n    //background-image: url(\"../background.jpg\");\n</script>\n\n\n<style>\n  main {\n    width: 1250px;\n    height: 550px;\n    border: solid black 1px;\n    position: relative;\n    margin: 20px auto;\n    background-size: contain;\n    background-color: #444444;\n  }\n  h2, h1 {\n    text-align: center;\n    font-family: 'Roboto Mono', monospace;\n  }\n  .prompt {\n    width: 1250px;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: .5em;\n    margin: auto;\n    position: relative center;\n  }\n</style>\n\n<h1>Cyber Snake</h1>\n<div class=\"prompt\">\n  <Questionbox {question} {option1} {option2}/>\n  <Answerbox {result} {explanation}/>\n</div>\n<main>\n  <Snake {snakeBodies} {direction}/>\n  <Food {food1Left} {food1Top} {food2Left} {food2Top} />\n</main>\n<h2>Score: {snakeBodies.length - 3}</h2>\n<svelte:window on:keydown={onKeyDown} />",
    "<script>\n  export let food1Top;\n  export let food1Left;\n  export let food2Top;\n  export let food2Left;\n</script>\n\n<style>\n  .food1, .food2 {\n    width: 48px;\n    height: 48px;\n    position: absolute;\n    border: solid black 1px;\n    z-index: 0;\n  }\n  .food1{\n    background-color: #0055FF;\n    border-radius: 50%;\n  }\n  .food2{\n    background-color: #FF5500;\n    border-radius: 5%;\n  }\n</style>\n\n<div class=\"food1\" style=\"left: {food1Left}px; top: {food1Top}px\"/>\n<div class=\"food2\" style=\"left: {food2Left}px; top: {food2Top}px\"/>",
    "<script>\n\texport let question;\n\texport let option1;\n\texport let option2;\n</script>\n\n<div class=\"questionbox\">\n\t<div class=\"question\">{question}</div>\n  <div class=\"legend\">\n    <div class=\"food1\"/>\n\t  <div class=\"option1\">{option1}</div>\n    <div class=\"food2\"/>\n\t  <div class=\"option2\">{option2}</div>\n  </div>\n</div>\n\n<style>\n\t.questionbox {\n\t\twidth: 92%;\n    height: 200px;\n\t\tborder: 1px solid #aaa;\n\t\tborder-radius: 2px;\n    position: relative left;\n    margin: auto;\n\t\tbox-shadow: 2px 2px 8px rgba(0,0,0,0.1);\n\t\tpadding: 1em;\n\t\tbackground-color: #FFFFFF;\n\t\tfont-family: 'Roboto Mono', monospace;\n\t}\n\t.question {\n\t\tfont-size: 1.5em;\n    text-align: center;\n\t}\n  .option1, .option2 {\n\t\tfont-size: 1.5em;\n  }\n\t.option1 {\n    color: #0055FF;\n\t}\n\t.option2 {\n    color: #FF5500;\n\t}\n  .food1, .food2 {\n    width: 1.5em;\n    height: 1.5em;\n    position: relative;\n    border: solid black 1px;\n    z-index: 0;\n    margin: .2em\n  }\n  .food1 {\n    background-color: #0055FF;\n    border-radius: 50%;\n  }\n  .food2 {\n    background-color: #FF5500;\n    border-radius: 5%;\n  }\n\t.legend {\n    display: grid;\n    grid-template-columns: 1.5em 1fr;\n    grid-template-rows: repeat(2, 50%);\n    grid-gap: 1.5em;\n    margin: 1.5em;\n    position: relative center;\n  }\n</style>",
    "<script>\n  export let top = unit;\n  export let left = unit;\n  export let isHead = false;\n  export let direction = \"right\";\n</script>\n\n<style>\n  .snake-body {\n    background-color: #00DDDD;\n    border: #00DDDD 1px solid;\n    position: absolute;\n    width: 48px;\n    height: 48px;\n    z-index: 3;\n  }\n  .eyes {\n    position: absolute;\n    background-color: #ADFF2F;\n    border: green 1px solid;\n    border-radius: 50%;\n    width: 20%;\n    height: 20%;\n  }\n  .mouth{\n    position: absolute;\n    background-color: black;\n    border-radius: 30%;\n    width: 20%;\n    height: 80%;\n  }\n  .pupils {\n    position: absolute;\n    background-color: black;\n    border-radius: 50%;\n    width: 5%;\n    height: 5%;\n  }\n  #leftEye {\n    left: 50%;\n    top: 25%;\n  }\n  #rightEye {\n    left: 50%;\n    bottom: 25%;\n  }\n  #leftPupil {\n    left: 63%;\n    top: 33%;\n  }\n  #rightPupil {\n    left: 63%;\n    bottom: 33%;\n  }\n  #mouth {\n    left: 80%;\n    top: 10%;\n  }\n  .snake-body.right {\n    transform: rotate(0deg);\n  }\n  .snake-body.left {\n    transform: rotate(180deg);\n  }\n  .snake-body.up {\n    transform: rotate(270deg);\n  }\n  .snake-body.down {\n    transform: rotate(90deg);\n  }\n</style>\n\n<div class=\"snake-body {direction}\" style=\"left: {left}px; top: {top}px;\">\n  {#if isHead}\n    <div id=\"leftEye\" class=\"eyes\" />\n    <div id=\"rightEye\" class=\"eyes\" />\n    <div id=\"leftPupil\" class=\"pupils\" />\n    <div id=\"rightPupil\" class=\"pupils\" />\n    <div id=\"mouth\" class=\"mouth\" />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}